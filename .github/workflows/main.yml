# Build the node applications and deploy them to an AWS EC2 instance via SSH

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # push:
  #  branches: [ master ]
  # pull_request:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a job called "build" and one called "deploy"
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: 'Checkout'
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Get NodeJS version'
      # requires that the .nvmrc file be in root dir
      # and sets the steps.nvm.outputs.NODE_VERSION var with it
        run: echo "##[set-output name=NODE_VERSION;]$(cat .nvmrc)"
        id: nvm

      # install node so we can use it to build with
      - name: 'Install NodeJS'
        uses: 'actions/setup-node@v1'
        with:
          node-version: '${{ steps.nvm.outputs.NODE_VERSION }}'
          
      # get secrets from this github repo under settings->secrets
      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_REGION }}

      # - name: "Install AWS CLI"
      #   run: |
      #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #     unzip -qq awscliv2.zip
      #     sudo ./aws/install > /dev/null
      #     rm awscliv2.zip
      #     rm -r ./aws

      - name: 'Configure'
        run: |
          echo 'NODE_ENV="production"' >> .env
          echo 'NOTIFY_ID="${{ secrets.DEV_NOTIFY_ID }}"' >> .env
          echo 'BLOCKNATIVE_API_KEY="${{ secrets.DEV_BLOCKNATIVE_API_KEY }}"' >> .env
          echo 'BLOCKNATIVE_NETWORK="1"' >> .env
          echo 'FORTMATIC_API_KEY="${{ secrets.DEV_FORTMATIC_API_KEY }}"' >> .env
          echo 'INTEGRATIONS_DISABLED="${{ secrets.DEV_INTEGRATIONS_DISABLED }}"' >> .env
          echo 'PLAID_ENVIRONMENT="production"' >> .env
          echo 'PLAID_CLIENT_ID="${{ secrets.DEV_PLAID_CLIENT_ID }}"' >> .env
          echo 'DATA_PROVIDER_URL="${{ secrets.PROD_DATA_PROVIDER_URL }}"' >> .env
          echo 'INFURA_API_KEY="${{ secrets.DEV_INFURA_API_KEY }}"' >> .env
          echo 'VERSION="${{ github.sha }}"' >> .env
      - name: 'Install NodeJS dependencies'
        run: yarn

      - name: 'Build WebApp'
        run: yarn build

      - name: 'Upload to S3'
        run: |
          aws s3 cp dist s3://${{ secrets.ALPHA_S3_BUCKET }}/ --recursive
          aws s3 cp dist/index.html s3://${{ secrets.ALPHA_S3_BUCKET }} --metadata-directive REPLACE --cache-control no-cache
